library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv, stringAsFactors=F)
mydf<-read.csv(file=path2csv, stringAsFactors=F)
?read.csv
mydf<-read.csv(path2csv, stringsAsFactors=F)
mydf<-read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, users=="IN")
filter(cran, r_version == "3.1.1", users == "IN")
filter(cran, r_version == "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran, ip_id)
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb/2^10)
mutate(cran3, size=size+1000)
mutate(cran3, correct_size=size+1000)
summarise(cran,avg_bytes=mean(size))
avg_bytessummarise(cran,mean(size))
avg_bytes<-summarise(cran,mean(size))
summarize(cran, avg_bytes=mean(size))
q()
library(swirl)
swirl()
library(dplyr)
mydfl<-tbl_df(cran)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
reset()
submit()
pack_sum
reset()
submit()
submit()
info()
submit()
submit()
submit()
reset()
submit()
reset()
reset()
reset()
submit()
submit()
q()
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran, package)
by_package
by_package<-group_by(cran, mean(size))
summarize(by_package, mean(size))
summarize(by_package, mean(size))
by_package<-group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
reset()
submit()
quantile(pack_sum$count, probs = 0.99)
top_counts<-filter(by_pacage, count>679)
top_counts<-filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_count, desc(count))
top_counts_sorted<-arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res<-gather(students2, sex_class, count)
res<-gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
student3
students3
submit()
?spread()
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
students3
ss1<-students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
ss1
mutate(ss1, class=extract_numeric(class))
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
submit()
?select
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 may 17")
ymd("1989 May 17")
ymd("1989-5-17")
ymd("1989 5 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
ymd(19850825)
ymd(1985825)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=8, minutes=34)
this_moment
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(datasets)
data(iris)
?iris
colnames(iris)
mean(iris$Spal.Length)
mean(iris$Sepal.Length)
library(dplyr)
tb<-tbl_df(iris)
virginica<-filter(tb, Species="virginica")
virginica<-filter(tb, Species=="virginica")
mean(virginica, Sepal.Length)
virginica
(virginica, mean(Sepal.Length))
filter(virginica, mean(Sepal.Length))
summarize(virginica, mean(Sepal.Length))
apply(iris[, 1:4], 2, mean)
rowMeans(iris[,1:4])
apply(iris, 1, mean)
colMeans(iris)
library(datasets)
data(mtcars)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars@hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
dif<-tapply(mtcars$hp, mtcars$cyl, mean)
dif
dif[1]
dif[1,]
dif[,1]
obj(dif)
objects(dif)
dif[1,1]
debug(ls)
ls
ls
x<-matrix(1:6,2,3)
exit
q
q()
quit()
x<-matrix(1:6,2,3)
x
getwd()
ls
undebug(ls)
ls
undebug(ls)
ls()
dir()
dir[13]
pp<-paste(getwd(), "R Programming", sep="/")
pp
setwd(pp)
getwd()
dir
dir()
pp<-paste(getwd(), "Assignments/ProgrammingAssignment2/", sep="/")
setwd(pp)
getwd()
dir()
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
x
m <-makeCacheMatrix(x)
m
m$get
m$get()
cacheSolve(m)
cacheSolve(m)
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
source("cachematrix.R")
matrix(1:9,3,3)
mx<-matrix(1:9,3,3)
makeCacheMatrix(mx)
mxo<-makeCacheMatrix(mx)
cacheSolve(mxo)
set.seed(11023)
r=rnorm(3829)
mx<-matrix(r, nrow=12, ncol=12)
r=rnorm(38)
mx<-matrix(r, nrow=38, ncol=38)
mxo<-makeCacheMatrix(mx)
cacheSolve(mxo)
source("cachematrix.R")
mx
mx[1,4,5,11,33,2,33,89,101]
mx[1,4,5,11,33,2,33,89,101)
mx([)1,4,5,11,33,2,33,89,101)
mx(1,4,5,11,33,2,33,89,101)
mx<-matrix(1,4,5,11,33,2,33,89,101)
q()
